name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python セットアップ
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # pip キャッシュ
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # pip, setuptools, wheel を最新化
      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      # 依存関係インストール
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Airflow 用の初期化ディレクトリ作成（権限も整備）
      - name: Initialize Airflow directories
        run: |
          sudo mkdir -p ./logs ./dags ./plugins ./input ./output
          sudo chmod -R 777 ./logs ./dags ./plugins ./input ./output

      # airflow-init を完了させる（DB init + ユーザ作成）
      - name: Run Airflow init
        run: |
          docker compose run --rm airflow-init

      # webserver / scheduler / worker を起動
      - name: Start Airflow services
        run: |
          docker compose up -d --build airflow-webserver airflow-scheduler airflow-worker

      # Webserver ヘルスチェック（最大15分待つ）
      - name: Wait for Airflow webserver
        run: |
          for i in {1..90}; do
            if docker compose exec -T airflow-webserver curl -s http://localhost:8080/health | grep -q "healthy"; then
              echo "Airflow is healthy!"
              exit 0
            fi
            echo "Waiting for Airflow... ($i/90)"
            sleep 10
          done
          echo "Airflow did not become healthy in time."
          docker compose logs
          exit 1

      # デバッグ用ログ（常に出力）
      - name: Debug Airflow logs
        run: |
          echo "=== docker compose ps ==="
          docker compose ps || true
          echo
          echo "=== airflow-webserver logs ==="
          docker compose logs airflow-webserver || true
          echo
          echo "=== airflow-scheduler logs ==="
          docker compose logs airflow-scheduler || true

      # DAG を backfill 実行（必ず DagRun を作成）
      - name: Run DAG via backfill
        run: |
          docker compose exec -T airflow-webserver \
            airflow dags backfill industry_metrics_full_dag \
            -s 2025-01-01 -e 2025-01-01 --reset-dagruns

      # 少し待機（スケジューラが反映するまで）
      - name: Wait after backfill
        run: sleep 20

      # タスク状態を確認
      - name: Check task state (preprocess_ads)
        run: |
          docker compose exec -T airflow-webserver \
            airflow tasks state industry_metrics_full_dag preprocess_ads 2025-01-01

      - name: Check task state (calc_ads_metrics)
        run: |
          docker compose exec -T airflow-webserver \
            airflow tasks state industry_metrics_full_dag calc_ads_metrics 2025-01-01

      # タスクを直接テスト実行（ログ確認用）
      - name: Task test preprocess_ads
        run: |
          docker compose exec -T airflow-webserver \
            airflow tasks test industry_metrics_full_dag preprocess_ads 2025-01-01 || true

      - name: Task test calc_ads_metrics
        run: |
          docker compose exec -T airflow-webserver \
            airflow tasks test industry_metrics_full_dag calc_ads_metrics 2025-01-01 || true

      # 出力ファイルの確認（コンテナ内）
      - name: Check output files
        run: |
          docker compose exec -T airflow-webserver ls -l /opt/airflow/output || true
          docker compose exec -T airflow-webserver cat /opt/airflow/output/*.csv || true

      # ログ収集（直近200行）
      - name: Show logs
        run: docker compose logs --tail=200

      # 後処理
      - name: Shutdown
        if: always()
        run: docker compose down
