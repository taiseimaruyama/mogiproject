name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AIRFLOW_FERNET_KEY: ${{ secrets.AIRFLOW_FERNET_KEY }}

    services:
      docker:
        image: docker:20.10-dind
        options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Airflow のDB初期化 & Adminユーザー作成
      - name: Initialize Airflow DB
        run: docker compose run --rm airflow-init

      - name: Start Airflow with Docker Compose
        run: docker compose up -d

      - name: Wait for Airflow webserver to be healthy
        run: |
          for i in {1..24}; do
            if curl -s http://localhost:8080/health; then
              echo "✅ Airflow is healthy"
              exit 0
            fi
            echo "⏳ Still waiting... ($i)"
            sleep 5
          done
          echo "❌ Airflow did not become healthy in time"
          exit 1

      - name: Trigger Airflow DAG
        run: |
          echo "🚀 Triggering DAG industry_metrics_full_dag"
          docker compose exec -T airflow-webserver \
            airflow dags trigger industry_metrics_full_dag

      # === リアルタイムで scheduler / worker / webserver のログを流す ===
      - name: Stream Airflow logs + Wait for DAG result
        run: |
          echo "📡 Streaming Airflow logs in real-time..."
          docker compose logs --tail=200 -f airflow-scheduler &
          PID1=$!
          docker compose logs --tail=200 -f airflow-worker &
          PID2=$!
          docker compose logs --tail=200 -f airflow-webserver &
          PID3=$!

          for i in {1..40}; do   # 30秒 × 40回 = 最大20分
            echo "⏳ Checking DAG status... ($i)"
            
            RUNS=$(docker compose exec -T airflow-webserver \
              airflow dags list-runs -d industry_metrics_full_dag --no-backfill --state success | tail -n +3 | wc -l)
            if [ "$RUNS" -gt 0 ]; then
              echo "✅ DAG finished successfully"
              kill $PID1 $PID2 $PID3 || true
              exit 0
            fi

            FAILS=$(docker compose exec -T airflow-webserver \
              airflow dags list-runs -d industry_metrics_full_dag --no-backfill --state failed | tail -n +3 | wc -l)
            if [ "$FAILS" -gt 0 ]; then
              echo "❌ DAG failed"
              kill $PID1 $PID2 $PID3 || true
              echo "📜 === Scheduler logs (last 200) ==="
              docker compose logs --tail=200 airflow-scheduler
              echo "📜 === Worker logs (last 200) ==="
              docker compose logs --tail=200 airflow-worker
              echo "📜 === Webserver logs (last 200) ==="
              docker compose logs --tail=200 airflow-webserver
              exit 1
            fi

            sleep 30
          done

          echo "❌ DAG did not finish within 20 minutes"
          kill $PID1 $PID2 $PID3 || true
          echo "📜 === Scheduler logs (last 200) ==="
          docker compose logs --tail=200 airflow-scheduler
          echo "📜 === Worker logs (last 200) ==="
          docker compose logs --tail=200 airflow-worker
          echo "📜 === Webserver logs (last 200) ==="
          docker compose logs --tail=200 airflow-webserver
          exit 1

      - name: Test GCS connection
        run: |
          echo "Testing GCS connection..."
          # gsutil ls とか接続確認コマンドを入れる

      - name: Test S3 connection
        run: |
          echo "Testing S3 connection..."
          aws s3 ls s3://domoproject || true

      - name: Test BigQuery connection
        run: |
          echo "Testing BigQuery connection..."
          # bq query --use_legacy_sql=false "SELECT 1"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload output files to S3
        if: always()
        run: |
          echo "📤 Uploading files in ./output to S3..."
          ls -R output || echo "⚠️ output directory not found"
          if [ -d output ]; then
            aws s3 cp output/ s3://domoproject/ --recursive
          else
            echo "⚠️ No output directory found"
          fi
