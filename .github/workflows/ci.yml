name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Initialize Airflow directories
        run: |
          sudo mkdir -p ./logs ./dags ./plugins ./input ./output
          sudo chmod -R 777 ./logs ./dags ./plugins ./input ./output

      - name: Generate dummy input data (365日分)
        run: |
          mkdir -p input
          python - <<'EOF'
          import pandas as pd, numpy as np
          # === retail.csv ===
          dates = pd.date_range("2025-01-01","2025-12-31")
          products = ["A","B","C"]
          rows = []
          for d in dates:
              for p in products:
                  sales = np.random.randint(50,200)
                  stock = np.random.randint(0,100)
                  rows.append([d.strftime("%Y-%m-%d"), p, sales, stock])
          df = pd.DataFrame(rows, columns=["date","product","sales","stock"])
          df.to_csv("input/retail.csv", index=False)
          print("Generated retail.csv with", len(df), "rows")

          # === ads.csv ===
          campaigns = ["CAMP1","CAMP2","CAMP3"]
          rows = []
          for d in dates:
              for c in campaigns:
                  impressions = np.random.randint(1000,10000)
                  clicks = np.random.randint(10, max(11, impressions//10))
                  spend = np.random.randint(500,5000)
                  revenue = int(spend * np.random.uniform(1.2,3.0))
                  rows.append([d.strftime("%Y-%m-%d"),c,impressions,clicks,spend,revenue])
          df = pd.DataFrame(rows, columns=["date","campaign_id","impressions","clicks","spend","revenue"])
          df.to_csv("input/ads.csv", index=False)
          print("Generated ads.csv with", len(df), "rows")
          EOF

      - name: Write gcp-credentials.json
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > gcp-credentials.json

      - name: Write .env file for docker-compose
        run: |
          echo "AIRFLOW__CORE__FERNET_KEY=${{ secrets.AIRFLOW_FERNET_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "GCS_BUCKET=${{ secrets.GCS_BUCKET }}" >> .env
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env

      - name: Run Airflow init
        run: docker compose run --rm airflow-init

      - name: Start Airflow services
        run: docker compose up -d --build airflow-webserver airflow-scheduler airflow-worker

      - name: Wait for Airflow webserver
        run: |
          for i in {1..90}; do
            if docker compose exec -T airflow-webserver curl -s http://localhost:8080/health | grep -q "healthy"; then
              echo "Airflow is healthy!"
              exit 0
            fi
            echo "Waiting for Airflow... ($i/90)"
            sleep 10
          done
          echo "Airflow did not become healthy in time."
          docker compose logs
          exit 1

      - name: Debug Airflow logs
        run: |
          docker compose ps || true
          docker compose logs airflow-webserver || true
          docker compose logs airflow-scheduler || true

      - name: Debug Airflow connections (before DAG run)
        run: docker compose exec -T airflow-webserver airflow connections list

      - name: Unpause DAG
        run: docker compose exec -T airflow-webserver airflow dags unpause industry_metrics_full_dag

      - name: Trigger DAG
        run: |
          docker compose exec -T airflow-webserver \
            airflow dags trigger -e 2025-01-01 industry_metrics_full_dag

      - name: Wait after trigger
        run: sleep 30

      - name: Check DAG runs
        run: |
          docker compose exec -T airflow-webserver \
            airflow dags list-runs -d industry_metrics_full_dag | tail -n 20

      - name: Check task state (create_bq_dataset)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag create_bq_dataset 2025-01-01

      - name: Debug task logs (create_bq_dataset from worker)
        run: |
          docker compose exec -T airflow-worker \
            cat /opt/airflow/logs/industry_metrics_full_dag/create_bq_dataset/2025-01-01T00:00:00+00:00/1.log || true

      - name: Check task state (preprocess_retail)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag preprocess_retail 2025-01-01

      - name: Check task state (calc_retail_metrics)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag calc_retail_metrics 2025-01-01

      - name: Check task state (upload_retail_metrics_to_gcs)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag upload_retail_metrics_to_gcs 2025-01-01

      - name: Check task state (load_retail_metrics_to_bq)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag load_retail_metrics_to_bq 2025-01-01

      - name: Debug Airflow variables
        run: docker compose exec -T airflow-webserver airflow variables list || true

      - name: Debug DAG list
        run: docker compose exec -T airflow-scheduler airflow dags list

      - name: Debug tasks list
        run: docker compose exec -T airflow-scheduler airflow tasks list industry_metrics_full_dag

      - name: Debug DAG import errors
        run: docker compose exec -T airflow-scheduler airflow dags list-import-errors || true

      - name: Debug scheduler logs (full)
        run: docker compose logs airflow-scheduler || true

      - name: Debug worker logs (full)
        run: docker compose logs airflow-worker || true

      - name: Debug worker logs (detailed)
        run: |
          echo "------ airflow-worker full logs ------"
          docker compose logs airflow-worker || true
          echo "------ last 300 lines ------"
          docker compose logs --tail=300 airflow-worker || true

      - name: Check output files
        run: |
          docker compose exec -T airflow-webserver ls -l /opt/airflow/output || true
          docker compose exec -T airflow-webserver cat /opt/airflow/output/*.csv || true

      - name: Upload output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: airflow-output
          path: ./output/*.csv

      - name: Show logs
        run: docker compose logs --tail=200

      - name: Shutdown
        if: always()
        run: docker compose down
