name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python セットアップ
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # pip キャッシュ
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # pip, setuptools, wheel を最新化
      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      # 依存関係インストール
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Airflow 用の初期化処理（例: DB init, ユーザ作成など）
      - name: Initialize Airflow
        run: |
          mkdir -p ./logs ./dags ./plugins
          chmod -R 777 ./logs ./dags ./plugins

      # docker-compose で Airflow 起動
      - name: Start Airflow with docker-compose
        run: |
          docker compose up -d --build

      # Webserver ヘルスチェック（コンテナ内から実行）
      - name: Wait for Airflow webserver
        run: |
          for i in {1..30}; do
            if docker compose exec -T airflow-webserver curl -s http://localhost:8080/health | grep '"status":"healthy"'; then
              echo "Airflow is healthy!"
              exit 0
            fi
            echo "Waiting for Airflow..."
            sleep 10
          done
          echo "Airflow did not become healthy in time."
          docker compose logs
          exit 1

      # DAG 実行テスト（例: industry_metrics_full_dag）
      - name: Trigger DAG
        run: |
          docker compose exec -T airflow-webserver airflow dags trigger industry_metrics_full_dag

      # DAG のステータス確認
      - name: Check DAG runs
        run: |
          docker compose exec -T airflow-webserver airflow dags list-runs -d industry_metrics_full_dag -n 1

      # ログ収集
      - name: Show logs
        run: docker compose logs --tail=200

      # 後処理
      - name: Shutdown
        if: always()
        run: docker compose down
