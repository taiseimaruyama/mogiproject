name: CI - Airflow PoC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start Airflow with Docker Compose
        run: |
          docker-compose up -d postgres redis
          echo "‚è≥ Waiting for Postgres & Redis..."
          sleep 20
          docker-compose up -d
          echo "‚è≥ Waiting for Airflow containers..."
          sleep 40
          docker ps -a

      - name: Initialize Airflow DB
        run: |
          WEB_SERVER=$(docker ps --format "{{.Names}}" | grep webserver || true)
          if [ -z "$WEB_SERVER" ]; then
            echo "‚ùå Airflow webserver container not found (before init)"
            docker ps -a
            exit 1
          fi
          echo "‚úÖ Found Airflow webserver: $WEB_SERVER"
          docker exec $WEB_SERVER airflow db upgrade
          docker exec $WEB_SERVER airflow users create \
            --username admin --password admin \
            --firstname admin --lastname user \
            --role Admin --email admin@example.com || true

      - name: Wait for Airflow webserver to be ready
        run: |
          WEB_SERVER=$(docker ps --format "{{.Names}}" | grep webserver || true)
          if [ -z "$WEB_SERVER" ]; then
            echo "‚ùå Airflow webserver container not found"
            docker ps -a
            exit 1
          fi
          echo "‚è≥ Waiting for webserver..."
          for i in {1..10}; do
            if docker exec $WEB_SERVER airflow info > /dev/null 2>&1; then
              echo "‚úÖ Webserver is ready!"
              break
            fi
            echo "‚è≥ Waiting ($i)..."
            sleep 10
          done

      - name: Trigger Airflow DAG
        run: |
          WEB_SERVER=$(docker ps --format "{{.Names}}" | grep webserver || true)
          if [ -z "$WEB_SERVER" ]; then
            echo "‚ùå Airflow webserver container not running"
            docker ps -a
            exit 1
          fi
          echo "üöÄ Triggering DAG in container: $WEB_SERVER"
          docker exec $WEB_SERVER airflow dags trigger industry_metrics_from_input || true
          sleep 30
          docker exec $WEB_SERVER airflow dags state industry_metrics_from_input $(date +%Y-%m-%d) || true

      - name: Run pytest (check output)
        run: |
          pip install pytest pandas
          pytest -v
