name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Initialize Airflow directories
        run: |
          mkdir -p ./dags ./logs ./plugins ./output
          chmod -R 777 ./dags ./logs ./plugins ./output

      - name: Generate dummy input data
        run: |
          mkdir -p input
          echo "date,sales,stock" > input/retail.csv
          echo "2025-01-01,100,10" >> input/retail.csv
          echo "2025-01-02,120,0" >> input/retail.csv

          echo "impressions,clicks,spend,revenue" > input/ads.csv
          echo "100,10,50,200" >> input/ads.csv
          echo "200,30,100,400" >> input/ads.csv

      - name: Write gcp-credentials.json
        run: echo "${{ secrets.GCP_CREDENTIALS }}" > ./gcp-credentials.json

      - name: Write .env file for docker-compose
        run: |
          echo "AIRFLOW__CORE__FERNET_KEY=${{ secrets.AIRFLOW_FERNET_KEY }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
          echo "GCS_BUCKET=${{ secrets.GCS_BUCKET }}" >> .env

      - name: Run Airflow init
        run: docker compose run --rm airflow-webserver airflow db init

      - name: Start Airflow services
        run: docker compose up -d --build

      - name: Wait for Airflow webserver
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080/health | grep -q "healthy"; then
              echo "Airflow is healthy"
              exit 0
            fi
            echo "Waiting for Airflow..."
            sleep 10
          done
          exit 1

      - name: Debug Airflow logs
        run: docker compose logs airflow-webserver | tail -n 50

      - name: Trigger DAG
        run: docker compose exec -T airflow-webserver airflow dags trigger industry_metrics_full_dag

      - name: Wait after trigger
        run: sleep 60

      - name: Get latest DAG run id
        id: get_run
        run: |
          LATEST_RUN=$(docker compose exec -T airflow-webserver airflow dags list-runs -d industry_metrics_full_dag --no-backfill | awk 'NR==2{print $2}')
          echo "LATEST_RUN=$LATEST_RUN" >> $GITHUB_ENV
          echo "Using DAG Run: $LATEST_RUN"

      - name: Check task state (create_bq_dataset)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag create_bq_dataset ${{ env.LATEST_RUN }}

      - name: Check task state (preprocess_retail)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag preprocess_retail ${{ env.LATEST_RUN }}

      - name: Check task state (calc_retail_metrics)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag calc_retail_metrics ${{ env.LATEST_RUN }}

      - name: Check task state (upload_retail_metrics_to_gcs)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag upload_retail_metrics_to_gcs ${{ env.LATEST_RUN }}

      - name: Check task state (load_retail_metrics_to_bq)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag load_retail_metrics_to_bq ${{ env.LATEST_RUN }}

      - name: Check task state (preprocess_ads)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag preprocess_ads ${{ env.LATEST_RUN }}

      - name: Check task state (calc_ads_metrics)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag calc_ads_metrics ${{ env.LATEST_RUN }}

      - name: Check task state (upload_ads_metrics_to_s3)
        run: docker compose exec -T airflow-webserver airflow tasks state industry_metrics_full_dag upload_ads_metrics_to_s3 ${{ env.LATEST_RUN }}

      - name: Debug Airflow variables
        run: docker compose exec -T airflow-webserver airflow variables list || true

      - name: Debug DAG list
        run: docker compose exec -T airflow-webserver airflow dags list

      - name: Debug DAG import errors
        run: docker compose exec -T airflow-webserver airflow dags import-errors

      - name: Debug scheduler logs (full)
        run: docker compose logs airflow-scheduler | tail -n 50

      - name: Debug worker logs (full)
        run: docker compose logs airflow-worker | tail -n 50

      - name: Debug worker logs (detailed)
        run: docker compose logs airflow-worker

      - name: Check output files
        run: ls -R output || true

      - name: Upload output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-files
          path: output/

      - name: Show logs
        run: docker compose logs --tail=100

      - name: Shutdown
        if: always()
        run: docker compose down -v
