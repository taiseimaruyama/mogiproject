name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Initialize Airflow directories
        run: |
          sudo mkdir -p ./logs ./dags ./plugins ./input ./output
          sudo chmod -R 777 ./logs ./dags ./plugins ./input ./output

      # ✅ ダミーデータ生成
      - name: Generate dummy input data
        run: |
          mkdir -p input
          echo "date,product,sales,stock" > input/retail.csv
          echo "2025-01-01,A,100,10" >> input/retail.csv
          echo "2025-01-02,A,120,0" >> input/retail.csv
          echo "date,impressions,clicks,spend,revenue" > input/ads.csv
          echo "2025-01-01,1000,50,200,500" >> input/ads.csv
          echo "2025-01-02,800,20,100,150" >> input/ads.csv

      # ✅ GCP Credentials をファイルに保存
      - name: Write GCP credentials file
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" > gcp_credentials.json

      - name: Run Airflow init
        run: docker compose run --rm airflow-init

      - name: Start Airflow services
        env:
          AIRFLOW__CORE__FERNET_KEY: ${{ secrets.AIRFLOW_FERNET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
        run: |
          docker compose up -d --build airflow-webserver airflow-scheduler airflow-worker

      - name: Wait for Airflow webserver
        run: |
          for i in {1..90}; do
            if docker compose exec -T airflow-webserver curl -s http://localhost:8080/health | grep -q "healthy"; then
              echo "Airflow is healthy!"
              exit 0
            fi
            echo "Waiting for Airflow... ($i/90)"
            sleep 10
          done
          echo "Airflow did not become healthy in time."
          docker compose logs
          exit 1

      - name: Debug Airflow connections (before DAG run)
        run: docker compose exec -T airflow-webserver airflow connections list

      - name: Unpause DAG
        run: docker compose exec -T airflow-webserver airflow dags unpause industry_metrics_full_dag

      - name: Trigger DAG
        run: |
          docker compose exec -T airflow-webserver \
            airflow dags trigger -e 2025-01-01 industry_metrics_full_dag

      - name: Wait after trigger
        run: sleep 30

      - name: Check output files
        run: |
          docker compose exec -T airflow-webserver ls -l /opt/airflow/output || true
          docker compose exec -T airflow-webserver cat /opt/airflow/output/*.csv || true

      - name: Upload output as artifact
        uses: actions/upload-artifact@v4
        with:
          name: airflow-output
          path: ./output/*.csv

      - name: Shutdown
        if: always()
        run: docker compose down
